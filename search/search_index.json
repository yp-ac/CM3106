{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CM3106 - Computer Graphics Using C by yashppawar Reference : Colorado BGI Docs Installation Download and install the cs1300-setup.msi 1 from the CSCI 1300 Software Package 2 , then use the cs1300-command-prompt.exe to build and run! VS Code does not recognize <graphics.h> to fix the above error, we update the C/C++ Configurations c_cpp_properties.json and udpate the includePath 1 2 3 4 5 6 7 8 9 10 11 12 { \"configurations\" : [ { \"name\" : \"Win32\" , \"includePath\" : [ \"${workspaceFolder}/**\" , \"C:\\\\Program Files (x86)\\\\Colorado\\\\cs1300\\\\include\" // Add this line ], // Other Properties } ] } The properties file can be opened by opening the Command palette (by using shortcut Ctrl + Shift + P ) and then typing \"C configurations\" > \"Edit Configurations (JSON)\" Build and Run! The code files are C++ files, these can have any of the following extensions .C , .cc , .cpp , .CPP , .c++ , .cp , or .cxx . 3 To build (in general) we will use the GNU g++ compiler Windows GNU/linux C : \\Codes > g++ input-file.cc -o output.exe $ g++ input-file.cc -o output.out and then to execute the program Windows GNU/linux C : \\Codes > output.exe $ ./output.out but for <graphics.h> we will be using the bgi++ compiler provided in the CS1300 tools Windows C : \\Codes > bgi++ input-file.cc -o output.exe C : \\Codes > output.exe Flags various flags can be used to customize the output of the compiler -g Generate source-level debug information -o <file> Write output to <file> -W<warning> Enable the specified warning the -Wall will enable all warnings Windows C : \\Codes > bgi++ input-file.cc -o output.exe -g -Wall https://home.cs.colorado.edu/~main/cs1300/cs1300-setup.msi \u21a9 CSCI 1300 Software Package - https://home.cs.colorado.edu/~main/cs1300/README.html \u21a9 C++ File Extensions : StackOverflow \u21a9","title":"CM3106"},{"location":"#cm3106-computer-graphics-using-c","text":"by yashppawar Reference : Colorado BGI Docs","title":"CM3106 - Computer Graphics Using C"},{"location":"#installation","text":"Download and install the cs1300-setup.msi 1 from the CSCI 1300 Software Package 2 , then use the cs1300-command-prompt.exe to build and run! VS Code does not recognize <graphics.h> to fix the above error, we update the C/C++ Configurations c_cpp_properties.json and udpate the includePath 1 2 3 4 5 6 7 8 9 10 11 12 { \"configurations\" : [ { \"name\" : \"Win32\" , \"includePath\" : [ \"${workspaceFolder}/**\" , \"C:\\\\Program Files (x86)\\\\Colorado\\\\cs1300\\\\include\" // Add this line ], // Other Properties } ] } The properties file can be opened by opening the Command palette (by using shortcut Ctrl + Shift + P ) and then typing \"C configurations\" > \"Edit Configurations (JSON)\"","title":"Installation"},{"location":"#build-and-run","text":"The code files are C++ files, these can have any of the following extensions .C , .cc , .cpp , .CPP , .c++ , .cp , or .cxx . 3 To build (in general) we will use the GNU g++ compiler Windows GNU/linux C : \\Codes > g++ input-file.cc -o output.exe $ g++ input-file.cc -o output.out and then to execute the program Windows GNU/linux C : \\Codes > output.exe $ ./output.out but for <graphics.h> we will be using the bgi++ compiler provided in the CS1300 tools Windows C : \\Codes > bgi++ input-file.cc -o output.exe C : \\Codes > output.exe","title":"Build and Run!"},{"location":"#flags","text":"various flags can be used to customize the output of the compiler -g Generate source-level debug information -o <file> Write output to <file> -W<warning> Enable the specified warning the -Wall will enable all warnings Windows C : \\Codes > bgi++ input-file.cc -o output.exe -g -Wall https://home.cs.colorado.edu/~main/cs1300/cs1300-setup.msi \u21a9 CSCI 1300 Software Package - https://home.cs.colorado.edu/~main/cs1300/README.html \u21a9 C++ File Extensions : StackOverflow \u21a9","title":"Flags"},{"location":"Algorithms/Bresnham_line/","text":"Bresnham Simple line drawing algorithm This algorithm is used for simple line drawing // Bresnham Simple line drawing algorithm #include <stdio.h> #include <string.h> #include <graphics.h> int main (){ int gd = DETECT , gm , x , y , x1 , x2 , y1 , y2 , dx , dy , p , i ; initgraph ( & gd , & gm , \"C: \\\\ Program Files (x86) \\\\ Colorado \\\\ cs1300 \\\\ bgi\" ); printf ( \"Enter the staring Co-ordinates : \" ); scanf ( \"%d %d\" , & x1 , & y1 ); printf ( \"Enter the end Co-ordinates : \" ); scanf ( \"%d %d\" , & x2 , & y2 ); dx = ( x2 - x1 ); dy = ( y2 - y1 ); x = x1 ; y = y1 ; p = 2 * dy - dx ; for ( i = 0 ; i < dx ; i ++ ) { if ( p < 0 ){ putpixel ( x , y , 4 ); x = x + 1 ; p = p + 2 * dy ; } else { putpixel ( x , y , 4 ); x = x + 1 ; y = y + 1 ; p = p + 2 * dy -2 * dx ; } } getch (); closegraph (); return 0 ; }","title":"Bresnham Simple line drawing algorithm"},{"location":"Algorithms/Bresnham_line/#bresnham-simple-line-drawing-algorithm","text":"This algorithm is used for simple line drawing // Bresnham Simple line drawing algorithm #include <stdio.h> #include <string.h> #include <graphics.h> int main (){ int gd = DETECT , gm , x , y , x1 , x2 , y1 , y2 , dx , dy , p , i ; initgraph ( & gd , & gm , \"C: \\\\ Program Files (x86) \\\\ Colorado \\\\ cs1300 \\\\ bgi\" ); printf ( \"Enter the staring Co-ordinates : \" ); scanf ( \"%d %d\" , & x1 , & y1 ); printf ( \"Enter the end Co-ordinates : \" ); scanf ( \"%d %d\" , & x2 , & y2 ); dx = ( x2 - x1 ); dy = ( y2 - y1 ); x = x1 ; y = y1 ; p = 2 * dy - dx ; for ( i = 0 ; i < dx ; i ++ ) { if ( p < 0 ){ putpixel ( x , y , 4 ); x = x + 1 ; p = p + 2 * dy ; } else { putpixel ( x , y , 4 ); x = x + 1 ; y = y + 1 ; p = p + 2 * dy -2 * dx ; } } getch (); closegraph (); return 0 ; }","title":"Bresnham Simple line drawing algorithm"},{"location":"Algorithms/DDA/","text":"DDA algorithm This algorithm is used for simple line drawing // DDA (Digital Differential Algorithm) algorithm #include <stdio.h> #include <string.h> #include <graphics.h> #include <math.h> int main (){ int gd = DETECT , gm , x , y , x1 , x2 , y1 , y2 , dx , dy , step , xinc , yinc , i ; initgraph ( & gd , & gm , \"C: \\\\ Program Files (x86) \\\\ Colorado \\\\ cs1300 \\\\ bgi\" ); printf ( \"Enter the staring Co-ordinates : \" ); scanf ( \"%d %d\" , & x1 , & y1 ); printf ( \"Enter the end Co-ordinates : \" ); scanf ( \"%d %d\" , & x2 , & y2 ); dx = ( x2 - x1 ); dy = ( y2 - y1 ); if ( abs ( dx ) >= abs ( dy )) step = abs ( dx ); else step = abs ( dy ); xinc = dx / step ; yinc = dy / step ; x = x1 ; y = y1 ; putpixel ( x , y , 4 ); for ( i = 0 ; i < step ; i ++ ) { x = x + xinc ; y = y + yinc ; putpixel ( x , y , 4 ); } getch (); closegraph (); return 0 ; }","title":"DDA"},{"location":"Algorithms/DDA/#dda-algorithm","text":"This algorithm is used for simple line drawing // DDA (Digital Differential Algorithm) algorithm #include <stdio.h> #include <string.h> #include <graphics.h> #include <math.h> int main (){ int gd = DETECT , gm , x , y , x1 , x2 , y1 , y2 , dx , dy , step , xinc , yinc , i ; initgraph ( & gd , & gm , \"C: \\\\ Program Files (x86) \\\\ Colorado \\\\ cs1300 \\\\ bgi\" ); printf ( \"Enter the staring Co-ordinates : \" ); scanf ( \"%d %d\" , & x1 , & y1 ); printf ( \"Enter the end Co-ordinates : \" ); scanf ( \"%d %d\" , & x2 , & y2 ); dx = ( x2 - x1 ); dy = ( y2 - y1 ); if ( abs ( dx ) >= abs ( dy )) step = abs ( dx ); else step = abs ( dy ); xinc = dx / step ; yinc = dy / step ; x = x1 ; y = y1 ; putpixel ( x , y , 4 ); for ( i = 0 ; i < step ; i ++ ) { x = x + xinc ; y = y + yinc ; putpixel ( x , y , 4 ); } getch (); closegraph (); return 0 ; }","title":"DDA algorithm"},{"location":"intro/","text":"Work In Progress","title":"Home"},{"location":"intro/#work-in-progress","text":"","title":"Work In Progress"},{"location":"projects/rainbow/","text":"Rainbow This program will draw a rainbow. C++ C #include <stdio.h> #include <string.h> #include <conio.h> #include <graphics.h> float translate ( float value , float leftMin , float leftMax , float rightMin , float rightMax ){ // Figure out how 'wide' each range is float leftSpan = leftMax - leftMin ; float rightSpan = rightMax - rightMin ; //# Convert the left range into a 0-1 range (float) float valueScaled = ( value - leftMin ) / ( leftSpan ); //# Convert the 0-1 range into a value in the right range. return rightMin + ( valueScaled * rightSpan ); } Driver Code int main (){ int gdriver = DETECT , gmode ; initwindow ( 700 , 700 ); int x , y , i ; x = getmaxx () / 2 ; y = getmaxy () / 2 ; for ( i = 0 ; i < 300 ; i ++ ) { delay ( 100 ); setcolor ( translate ( i / 10 % 16 , 0 , 16 , 1 , 15 )); arc ( x , y , 0 , 180 , i ); } getch (); closegraph (); return 0 ; } #include <stdio.h> #include <string.h> #include <conio.h> #include <graphics.h> float translate ( float value , float leftMin , float leftMax , float rightMin , float rightMax ){ // Figure out how 'wide' each range is float leftSpan = leftMax - leftMin ; float rightSpan = rightMax - rightMin ; //# Convert the left range into a 0-1 range (float) float valueScaled = ( value - leftMin ) / ( leftSpan ); //# Convert the 0-1 range into a value in the right range. return rightMin + ( valueScaled * rightSpan ); } Driver Code int main (){ int gdriver = DETECT , gmode ; initwindow ( 700 , 700 ); int x , y , i ; x = getmaxx () / 2 ; y = getmaxy () / 2 ; for ( i = 0 ; i < 300 ; i ++ ) { delay ( 100 ); setcolor ( translate ( i / 10 % 16 , 0 , 16 , 1 , 15 )); arc ( x , y , 0 , 180 , i ); } getch (); closegraph (); return 0 ; }","title":"Rainbow"},{"location":"projects/rainbow/#rainbow","text":"This program will draw a rainbow. C++ C #include <stdio.h> #include <string.h> #include <conio.h> #include <graphics.h> float translate ( float value , float leftMin , float leftMax , float rightMin , float rightMax ){ // Figure out how 'wide' each range is float leftSpan = leftMax - leftMin ; float rightSpan = rightMax - rightMin ; //# Convert the left range into a 0-1 range (float) float valueScaled = ( value - leftMin ) / ( leftSpan ); //# Convert the 0-1 range into a value in the right range. return rightMin + ( valueScaled * rightSpan ); } Driver Code int main (){ int gdriver = DETECT , gmode ; initwindow ( 700 , 700 ); int x , y , i ; x = getmaxx () / 2 ; y = getmaxy () / 2 ; for ( i = 0 ; i < 300 ; i ++ ) { delay ( 100 ); setcolor ( translate ( i / 10 % 16 , 0 , 16 , 1 , 15 )); arc ( x , y , 0 , 180 , i ); } getch (); closegraph (); return 0 ; } #include <stdio.h> #include <string.h> #include <conio.h> #include <graphics.h> float translate ( float value , float leftMin , float leftMax , float rightMin , float rightMax ){ // Figure out how 'wide' each range is float leftSpan = leftMax - leftMin ; float rightSpan = rightMax - rightMin ; //# Convert the left range into a 0-1 range (float) float valueScaled = ( value - leftMin ) / ( leftSpan ); //# Convert the 0-1 range into a value in the right range. return rightMin + ( valueScaled * rightSpan ); } Driver Code int main (){ int gdriver = DETECT , gmode ; initwindow ( 700 , 700 ); int x , y , i ; x = getmaxx () / 2 ; y = getmaxy () / 2 ; for ( i = 0 ; i < 300 ; i ++ ) { delay ( 100 ); setcolor ( translate ( i / 10 % 16 , 0 , 16 , 1 , 15 )); arc ( x , y , 0 , 180 , i ); } getch (); closegraph (); return 0 ; }","title":"Rainbow"}]}